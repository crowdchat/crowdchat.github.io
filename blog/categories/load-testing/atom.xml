<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: load-testing | CrowdChat Engineering]]></title>
  <link href="http://crowdchat.github.io/blog/categories/load-testing/atom.xml" rel="self"/>
  <link href="http://crowdchat.github.io/"/>
  <updated>2014-06-01T13:40:15-07:00</updated>
  <id>http://crowdchat.github.io/</id>
  <author>
    <name><![CDATA[CrowdChat Engineering]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Load Testing Using NodeJs Async]]></title>
    <link href="http://crowdchat.github.io/blog/2014/04/24/load-testing-using-nodejs-async/"/>
    <updated>2014-04-24T16:27:00-07:00</updated>
    <id>http://crowdchat.github.io/blog/2014/04/24/load-testing-using-nodejs-async</id>
    <content type="html"><![CDATA[<p>NodeJS is a platform for building applications using JavaScript. JavaScript is single threaded and has callback architecture. How about using this for load testing a Web server? Often we are limited by the tools and their feature set. If you are familiar with NodeJs, here is my quick solution for customized load testing.</p>

<!--more-->


<h3>Background</h3>

<p><a href="https://github.com/caolan/async">Async</a> is one of the most popular node module for code organization in JavaScript otherwise you end up in callback hell. Let&rsquo;s create a nodejs project and add async as one of the dependencies.</p>

<p><code>
&lt;projectDir&gt;
  |
  +-- package.json
  +-- app.js
</code></p>

<p>package.json:
```
{
  &ldquo;name&rdquo;: &ldquo;CrowdChat&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.0.1&rdquo;,
  &ldquo;private&rdquo;: true,
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"async": "0.2.9"
</code></pre>

<p>  }
}
```</p>

<h3>Making HTTP requests in NodeJS</h3>

<p>Let&rsquo;s make our HTTP request:</p>

<p>```
function getResponse(param, callback) {</p>

<pre><code>var options = { 
    hostname: 'customer.crowdspots.com',
    path: '/someApi?query=' + encodeURIComponent(param),
    method: 'GET'
    }
var results = ''; 
var req = http.request(options, function(res) {
    res.on('data', function (chunk) {
        results = results + chunk;
    }); 
    res.on('end', function () {
        callback.apply(this, [null, results]);
    }); 
});

req.on('error', function(e) {
    console.error('Error in fetching: ' + param + e);
    callback.apply(this, [e, results]);
});
</code></pre>

<p>}
```</p>

<p>If you are not interested in response data, you can skip <code>res.on('data',..)</code> event and just have <code>end</code> event for callback.</p>

<p>That&rsquo;s how simple is to make HTTP GET requests. For our usecase we needed to fire a test only after user logs in. Hence, I hacked the user cookie from Web Browser and passed in request options. You can achieve further customizations using HTTP Headers (accepts language, cookie, caching control, connections alive, etc.).</p>

<p>```</p>

<pre><code>var options = { 
    hostname: 'customer.crowdspots.com',
    path: '/somePage?query=' + encodeURIComponent(param),
    method: 'GET',
    headers: {'Cookie': 'JSESSIONID=7F868662EB6182B14E9A15E9E68E19EA'}
    }
};
</code></pre>

<p>```</p>

<h3>Firing parallel request</h3>

<p>The async library comes up with asynchronous control flow patterns like serial, each, parallel, waterfall, each, eachLimit, etc. For load testing one particular we are interested is <code>eachLimit</code> with limit.</p>

<p><code>
eachLimit(arr, limit, iterator, callback)
</code></p>

<p>The <code>eachLimit</code> executes the <code>iterator</code> function in parallel for each of the items in the array. However it will ensure not more than <code>limit</code> parallel iterators running. Let&rsquo;s assume we have a collection of parameters and each parameter represent independent argument for request to the web server.</p>

<p>```</p>

<pre><code>var PARALLEL_N = 20;
var paramsArray = [ "Hyderabad", "India", "Gujarat" , "Ahmedabad" , "USA", "New York" ];
var successCount = 0;
var errorCount = 0;
var totalTime = 0;
async.eachLimit(paramsArray, PARALLEL_N, 
        function(item, myCallback){
            var startTime = new Date();
            getResponse(item, function(err, result){
                    var time = (new Date() - startTime);
                    totalTime = totalTime + time;
                    if(err) {
                    }
                    if(result) {
                        successCount++;
                    }
                    myCallback();
            });
        },
        function(err, result) {
            console.log('AvgTime=' + (totalTime/paramsArray.length) + ', SuccessCount=' + nonZeroCount + ', errorCount=' + errorCount);
        }
);
</code></pre>

<p>```</p>

<p>Store this code in app.js and run as follows:</p>

<p><code>
$ node app.js
</code></p>

<p>Start your test with different values of PARALLEL_N = 5, 10, 25, 50, 75, 100, 200&hellip;</p>

<h3>Validating Results</h3>

<p>Ensure following points to prevent skewed results.</p>

<ul>
<li>The above example is a small demonstration with just 6 <code>paramsArray</code>. Typically you should do testing by making at least <code>100*PARALLEL_N</code> requests.</li>
<li>There is <em>startup overhead</em> where you should skip initial <code>PARALLEL_N</code> which are responsible for warming up the load.</li>
<li>If the HTTP responses are big, keep an eye on network bandwidth. Network bandwidth can also be a bottleneck to skew results.</li>
</ul>


<p>Author: <a href="https://twitter.com/@geekpack">@geekpack</a>, <a href="https://ankitjain.info/">Ankit Jain</a></p>
]]></content>
  </entry>
  
</feed>
