<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: http | CrowdChat Engineering]]></title>
  <link href="http://crowdchat.github.io/blog/categories/http/atom.xml" rel="self"/>
  <link href="http://crowdchat.github.io/"/>
  <updated>2014-06-01T13:40:15-07:00</updated>
  <id>http://crowdchat.github.io/</id>
  <author>
    <name><![CDATA[CrowdChat Engineering]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Load Testing Using NodeJs Async]]></title>
    <link href="http://crowdchat.github.io/blog/2014/04/24/load-testing-using-nodejs-async/"/>
    <updated>2014-04-24T16:27:00-07:00</updated>
    <id>http://crowdchat.github.io/blog/2014/04/24/load-testing-using-nodejs-async</id>
    <content type="html"><![CDATA[<p>NodeJS is a platform for building applications using JavaScript. JavaScript is single threaded and has callback architecture. How about using this for load testing a Web server? Often we are limited by the tools and their feature set. If you are familiar with NodeJs, here is my quick solution for customized load testing.</p>

<!--more-->


<h3>Background</h3>

<p><a href="https://github.com/caolan/async">Async</a> is one of the most popular node module for code organization in JavaScript otherwise you end up in callback hell. Let&rsquo;s create a nodejs project and add async as one of the dependencies.</p>

<p><code>
&lt;projectDir&gt;
  |
  +-- package.json
  +-- app.js
</code></p>

<p>package.json:
```
{
  &ldquo;name&rdquo;: &ldquo;CrowdChat&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.0.1&rdquo;,
  &ldquo;private&rdquo;: true,
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"async": "0.2.9"
</code></pre>

<p>  }
}
```</p>

<h3>Making HTTP requests in NodeJS</h3>

<p>Let&rsquo;s make our HTTP request:</p>

<p>```
function getResponse(param, callback) {</p>

<pre><code>var options = { 
    hostname: 'customer.crowdspots.com',
    path: '/someApi?query=' + encodeURIComponent(param),
    method: 'GET'
    }
var results = ''; 
var req = http.request(options, function(res) {
    res.on('data', function (chunk) {
        results = results + chunk;
    }); 
    res.on('end', function () {
        callback.apply(this, [null, results]);
    }); 
});

req.on('error', function(e) {
    console.error('Error in fetching: ' + param + e);
    callback.apply(this, [e, results]);
});
</code></pre>

<p>}
```</p>

<p>If you are not interested in response data, you can skip <code>res.on('data',..)</code> event and just have <code>end</code> event for callback.</p>

<p>That&rsquo;s how simple is to make HTTP GET requests. For our usecase we needed to fire a test only after user logs in. Hence, I hacked the user cookie from Web Browser and passed in request options. You can achieve further customizations using HTTP Headers (accepts language, cookie, caching control, connections alive, etc.).</p>

<p>```</p>

<pre><code>var options = { 
    hostname: 'customer.crowdspots.com',
    path: '/somePage?query=' + encodeURIComponent(param),
    method: 'GET',
    headers: {'Cookie': 'JSESSIONID=7F868662EB6182B14E9A15E9E68E19EA'}
    }
};
</code></pre>

<p>```</p>

<h3>Firing parallel request</h3>

<p>The async library comes up with asynchronous control flow patterns like serial, each, parallel, waterfall, each, eachLimit, etc. For load testing one particular we are interested is <code>eachLimit</code> with limit.</p>

<p><code>
eachLimit(arr, limit, iterator, callback)
</code></p>

<p>The <code>eachLimit</code> executes the <code>iterator</code> function in parallel for each of the items in the array. However it will ensure not more than <code>limit</code> parallel iterators running. Let&rsquo;s assume we have a collection of parameters and each parameter represent independent argument for request to the web server.</p>

<p>```</p>

<pre><code>var PARALLEL_N = 20;
var paramsArray = [ "Hyderabad", "India", "Gujarat" , "Ahmedabad" , "USA", "New York" ];
var successCount = 0;
var errorCount = 0;
var totalTime = 0;
async.eachLimit(paramsArray, PARALLEL_N, 
        function(item, myCallback){
            var startTime = new Date();
            getResponse(item, function(err, result){
                    var time = (new Date() - startTime);
                    totalTime = totalTime + time;
                    if(err) {
                    }
                    if(result) {
                        successCount++;
                    }
                    myCallback();
            });
        },
        function(err, result) {
            console.log('AvgTime=' + (totalTime/paramsArray.length) + ', SuccessCount=' + nonZeroCount + ', errorCount=' + errorCount);
        }
);
</code></pre>

<p>```</p>

<p>Store this code in app.js and run as follows:</p>

<p><code>
$ node app.js
</code></p>

<p>Start your test with different values of PARALLEL_N = 5, 10, 25, 50, 75, 100, 200&hellip;</p>

<h3>Validating Results</h3>

<p>Ensure following points to prevent skewed results.</p>

<ul>
<li>The above example is a small demonstration with just 6 <code>paramsArray</code>. Typically you should do testing by making at least <code>100*PARALLEL_N</code> requests.</li>
<li>There is <em>startup overhead</em> where you should skip initial <code>PARALLEL_N</code> which are responsible for warming up the load.</li>
<li>If the HTTP responses are big, keep an eye on network bandwidth. Network bandwidth can also be a bottleneck to skew results.</li>
</ul>


<p>Author: <a href="https://twitter.com/@geekpack">@geekpack</a>, <a href="https://ankitjain.info/">Ankit Jain</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Browser cache invalidation in NodeJs with new deployments]]></title>
    <link href="http://crowdchat.github.io/blog/2014/04/23/browser-cache-invalidation-in-nodejs-with-new-deployments/"/>
    <updated>2014-04-23T16:31:00-07:00</updated>
    <id>http://crowdchat.github.io/blog/2014/04/23/browser-cache-invalidation-in-nodejs-with-new-deployments</id>
    <content type="html"><![CDATA[<p>Caching in Web browsers is important. Without caching page performance is hurt as each page navigation requires the same set of JavaScripts and CSS files to be re-fetched.</p>

<!--more-->


<p>We can achieve caching by setting Cache-Control header&rsquo;s max-age in the HTTP response headers. In NodeJS/Express stack, you do this done by passing options map to express.static() middle-ware. Here is an example:</p>

<p>```javascript
app.configure(&lsquo;production&rsquo;, function () {</p>

<pre><code>...
app.use(express.static(__dirname + '/public',
        { maxAge: 864000000}  // 10 days!
));
...
</code></pre>

<p>});
<code>
However, the challenge is to discard or bust this client cache for new code deployments. As HTTP is a stateless protocol, there is no way server can tell clients to ignore old caches and request again. If you do set max-age:0 then we shall not arrive in this situation at all. However, we want to achieve caching and refresh this cache with new code deployments. As HTTP is a stateless protocol, one simple solution is to generate a new URL for the resource. What if we append app version as query string or as folder path?
i.e.
</code>javascript
/js/main.js?v-1.0
<code>
or
</code>javascript
/js/v-1.0/main.js.
<code>``
Browsers will treat this as new URL and fetch again. NPM has a plugin</code>validator`, that exactly does this. The problem with npm:validator is &ndash; it requires to increment app version number for each new deployment or your sprint. If you forget to increment version no., you leave your clients buzzing with missing CSS classes. We can achieve this without introducing a new dependency. Let me simplify this and achieve the same using timestamps. Remember, less code keeps footprint limited! Solution In the following code we are trying to achieve a good caching period (30 days). Also this caching should not be applicable for your local development. We will be using app&rsquo;s start time as a substitute of version. (We have been using AWS-EBS for production deployments and each new deployment re-starts the app, giving new time-stamp with each deployment.)</p>

<p>```javascript
//All jade&rsquo;s static resources should have: ?v=#{deployVersion}
app.locals.deployVersion = (new Date).getTime();</p>

<p>app.configure(&lsquo;production&rsquo;, function () {</p>

<pre><code>...
app.use(express.static(path.join(__dirname, 'public'),
        { maxAge: 864000000 }
));
...
</code></pre>

<p>});
app.configure(&lsquo;development&rsquo;, function () {</p>

<pre><code>...
app.use(express.static(path.join(__dirname, 'public'),
        { maxAge: 0 }
));

app.locals.pretty = true; // why not prettify while coding :)
...
</code></pre>

<p>});</p>

<p>//We need to suffix all resource path with ?v=#{deployVersion} in all jade files.
//(Note: App&rsquo;s locals are available across jade.)</p>

<p>link(rel=&lsquo;stylesheet&rsquo;, href=&lsquo;<a href="http://crowdchat.github.io/css/index.css?v=#">http://crowdchat.github.io/css/index.css?v=#</a>{deployVersion}&rsquo;)
script(type=&lsquo;text/javascript&rsquo;, src=&lsquo;<a href="http://crowdchat.github.io/js/index.js?v=#">http://crowdchat.github.io/js/index.js?v=#</a>{deployVersion}&rsquo;)
script(type=&lsquo;text/javascript&rsquo;, src=&lsquo;<a href="http://crowdchat.github.io/js/bootstrap.min.js?v=#">http://crowdchat.github.io/js/bootstrap.min.js?v=#</a>{deployVersion}&rsquo;)
This renders all your resource URLs as follows forcing browser to request new resource.
link(rel=&lsquo;stylesheet&rsquo;, href=&lsquo;<a href="http://crowdchat.github.io/css/index.css?v=1386176288126">http://crowdchat.github.io/css/index.css?v=1386176288126</a>&rsquo;)
script(type=&lsquo;text/javascript&rsquo;, src=&lsquo;<a href="http://crowdchat.github.io/js/index.js?v=1386176288126">http://crowdchat.github.io/js/index.js?v=1386176288126</a>&rsquo;)
script(type=&lsquo;text/javascript&rsquo;, src=&lsquo;<a href="http://crowdchat.github.io/js/bootstrap.min.js?v=1386176288126">http://crowdchat.github.io/js/bootstrap.min.js?v=1386176288126</a>&rsquo;)
```</p>

<h1>What if you have distributed deployment?</h1>

<p>If you planning to deploy your app on AWS Elastic Beanstalk having auto scale (more than one app server), than above shall not work efficiently as each client browser may hit to new app server seeing a different time-stamp! Let&rsquo;s solve this by clustering all app starts in a 5 min span.
```javascript
app.locals.deployVersion =</p>

<pre><code>       Math.ceil((new Date).getTime()/300000)*300000;
</code></pre>

<p>```</p>

<h1>More ideas:</h1>

<ol>
<li>Serve files with an MD5 hash suffix. Try: Connect-Assets</li>
<li>Using GIT log as deployVersion. Integrate GIT api in project and read last commit ID</li>
<li>Incrementing app version number in each sprint :down:</li>
</ol>


<p>Author: <a href="https://twitter.com/@geekpack">@geekpack</a></p>
]]></content>
  </entry>
  
</feed>
